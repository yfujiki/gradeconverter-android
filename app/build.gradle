plugins {
    id("com.android.application")
    id("com.github.triplet.play") version "2.1.0"
}

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'jacoco-android'

android {
    compileSdkVersion 28
    defaultConfig {
        def versionPropertiesFile = file("version.properties")
        def versionProperties = new Properties()
        versionProperties.load(new FileInputStream(versionPropertiesFile))

        applicationId "com.responsivebytes.gradeconverter"
        minSdkVersion 19
        targetSdkVersion 28
        versionName versionProperties['VERSION_NAME']
        versionCode versionProperties['VERSION_CODE'].toInteger()
        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        def fileName
        def password
        def kalias
        def kpassword

        def keystorePropertiesFile = file("keystore.properties")

        if (keystorePropertiesFile.exists()) {
            def keystoreProperties = new Properties()
            keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

            fileName = keystoreProperties['storeFile']
            password = keystoreProperties['storePassword']
            kalias = keystoreProperties['keyAlias']
            kpassword = keystoreProperties['keyPassword']
        } else {
            fileName = System.getenv("storeFile")
            password = System.getenv("storePassword")
            kalias = System.getenv("keyAlias")
            kpassword = System.getenv("keyPassword")

            if (fileName == null ||
                    password == null ||
                    kalias == null ||
                    kpassword == null
            ) {
                logger.error("You need to either place appropriate keystore.properties or set proper environment variables for code signing.")
            }
        }

        // debug key store
        debug {
            storeFile file(fileName)
            storePassword password
            keyAlias kalias
            keyPassword kpassword
        }

        release {
            storeFile file(fileName)
            storePassword password
            keyAlias kalias
            keyPassword kpassword
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }
    useLibrary 'android.test.runner'
    bundle {
        density {
            enableSplit true
        }
        abi {
            enableSplit true
        }
        language {
            enableSplit true
        }
    }
}

play {
    serviceAccountCredentials = file("signing/google-play-service-key.json")
    defaultToAppBundles = true
    track = "beta"
}

configurations {
    ktlint
}

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "-F", "src/**/*.kt"
}

task('incrementVersionCode').doLast {
    def versionPropsFile = file('version.properties')

    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        def code = versionProps['VERSION_CODE'].toInteger() + 1

        versionProps['VERSION_CODE'] = code.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
    } else {
        throw new GradleException("Could not read version.properties!")
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'generateDebugBuildConfig' || task.name == 'generateReleaseBuildConfig') {
        task.dependsOn('ktlintFormat')
    }

    if (task.name == 'generateReleaseBuildConfig') {
        task.dependsOn('incrementVersionCode')
    }
}

dependencies {
    ktlint "com.github.shyiko:ktlint:0.15.0"

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.jakewharton.timber:timber:4.7.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.8'
    implementation 'io.reactivex.rxjava2:rxkotlin:2.3.0'
    implementation 'com.google.dagger:dagger:2.21'
    implementation 'com.google.dagger:dagger-android-support:2.21'
    kapt 'com.google.dagger:dagger-compiler:2.21'
    kapt 'com.google.dagger:dagger-android-processor:2.21'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.2'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.2'
    debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-contrib:3.0.2'
    androidTestImplementation 'tools.fastlane:screengrab:1.2.0'
}

//project.afterEvaluate {
//    android.applicationVariants.all { variant ->
//        def realVariantName = variant.name
//        def variantName = variant.name.capitalize()
//        def task = project.tasks["jacocoTest${variantName}UnitTestReport"]
//        def defaultExcludes = task.classDirectories.excludes
//        def excludes = defaultExcludes
//        def dirPath = "${buildDir}/tmp/kotlin-classes/${realVariantName}"
//        def kotlinDebugTree =
//                fileTree(dir: dirPath, excludes: [])
//        task.classDirectories.excludes = excludes
//        task.classDirectories += kotlinDebugTree
//    }
//}

apply plugin: 'com.google.gms.google-services'